<!-- $Id$ -->

<!-- ********************auxiliar******************** -->

<!-- $Id$ -->
<Chapter Label="Auxiliar">
<Heading>Useful properties and functions</Heading>

<Section Label="AuxiliarProperties">
<Heading>Semisimple group algebras of finite groups</Heading>

<ManSection>
   <Prop Name="IsZeroCharacteristicGroupAlgebra" 
         Arg="KG"  
         Comm="Is a group algebra of a finite group over the field of char zero?" />
   <Description>
         Returns <K>true</K> if <A>KG</A> is the group algebra of a finite 
         group over the field of characteristic zero, and <K>false</K> if 
         <A>KG</A> is another kind of a group ring.
   </Description>
</ManSection>

<Example>
<![CDATA[
gap> CG:=GroupRing( GaussianRationals, DihedralGroup(16) );;
gap> IsZeroCharacteristicGroupAlgebra( CG );
true
gap> FG:=GroupRing( GF(2), SymmetricGroup(3) );;                    
gap> IsZeroCharacteristicGroupAlgebra( FG );
false
]]>
</Example>


<ManSection>
   <Prop Name="IsSemisimpleRationalGroupAlgebra" 
         Arg="KG"  
         Comm="Is rational group algebra of finite group?" />
   <Description>
         Returns <K>true</K> if <A>KG</A> is the rational group algebra of a finite 
         group and <K>false</K> if <A>KG</A> is another kind of a group ring.
   </Description>
</ManSection>

<Example>
<![CDATA[
gap> QG:=GroupRing( Rationals, SymmetricGroup(4) );;       
gap> IsSemisimpleRationalGroupAlgebra( QG );       
true
gap> CG:=GroupRing( GaussianRationals, DihedralGroup(16) );;               
gap> IsSemisimpleRationalGroupAlgebra( CG );                              
false
gap> FG:=GroupRing( GF(2), SymmetricGroup(3) );;
gap> IsSemisimpleRationalGroupAlgebra( FG );
false
]]>
</Example>


<ManSection>
   <Prop Name="IsSemisimpleFiniteGroupAlgebra" 
         Arg="KG"  
         Comm="Is a semisimple group algebra of a finite group over a finite field?" />
   <Description>
         Returns <K>true</K> if <A>KG</A> is a semisimple finite group algebra, 
         that is a group algebra of a finite group <M>G</M> over a field <M>K</M> 
         of order coprime with the order of <M>G</M>, and <K>false</K> 
         if <A>KG</A> is another kind of a group ring.
   </Description>
</ManSection>

<Example>
<![CDATA[
gap> FG:=GroupRing( GF(5), SymmetricGroup(3) );;
gap> IsSemisimpleFiniteGroupAlgebra( FG );
true
gap> KG:=GroupRing( GF(2), SymmetricGroup(3) );; 
gap> IsSemisimpleFiniteGroupAlgebra( KG ); 
false
gap> QG:=GroupRing( Rationals, SymmetricGroup(4) );;
gap> IsSemisimpleFiniteGroupAlgebra( QG );
false
]]>
</Example>


</Section>


<Section Label="AuxiliarOperations">
<Heading>Operations over group rings elements</Heading>


<ManSection>
   <Oper Name="Centralizer" 
         Arg="G x"  
         Comm="Centralizer of a group ring element in a subgroup of G" />
   <Returns>
         a subgroup of a group <A>G</A>.
   </Returns>         
   <Description>
         Returns the centralizer of an element <A>x</A> of a group ring 
         <M>FH</M> in a subgroup <A>G</A> of the underlying group <M>H</M> 
         of a group ring <M>FH</M>.<P/>
         This operation adds the new method to the operation that already 
         exists in &GAP; 
   </Description>
</ManSection>

<Example>
<![CDATA[
gap> QG:=GroupRing( Rationals, SymmetricGroup(3) );;
gap> pci:=PrimitiveCentralIdempotentsByStronglySP( QG );
[ (1/6)*()+(1/6)*(2,3)+(1/6)*(1,2)+(1/6)*(1,2,3)+(1/6)*(1,3,2)+(1/6)*(1,3), 
  (1/6)*()+(-1/6)*(2,3)+(-1/6)*(1,2)+(1/6)*(1,2,3)+(1/6)*(1,3,2)+(-1/6)*(1,3), 
  (2/3)*()+(-1/3)*(1,2,3)+(-1/3)*(1,3,2) ]
gap> List( pci, x -> Centralizer( AlternatingGroup(3), x ) ); 
[ Group([ (1,2,3) ]), Group([ (1,2,3) ]), Group([ (1,2,3) ]) ]
]]>
</Example>


<ManSection>
   <Oper Name="OnPoints" 
         Arg="x g"  
         Comm="Conjugate of x by g" />
   <Oper Name="\^" 
         Arg="x g"  
         Comm="Conjugate of x by g" />
   <Returns>
         an element of a group ring
   </Returns>         
   <Description>
         Returns the conjugate <M>x^g = g^{-1} x g</M> of <A>x</A> by <A>g</A>, 
         where <A>a</A> is an element of a group ring <M>FG</M> and <A>g</A> is
         an element of the underlying group <M>G</M>.
         Usage of <C>a^g</C> produces the same output.<P/>
         This operation adds the new method to the operation that already 
         exists in &GAP;
   </Description>
</ManSection>

<Example>
<![CDATA[
gap> QG:=GroupRing( Rationals, SymmetricGroup(3) );;
gap> pci:=PrimitiveCentralIdempotentsByStronglySP( QG );
[ (1/6)*()+(1/6)*(2,3)+(1/6)*(1,2)+(1/6)*(1,2,3)+(1/6)*(1,3,2)+(1/6)*(1,3), 
  (1/6)*()+(-1/6)*(2,3)+(-1/6)*(1,2)+(1/6)*(1,2,3)+(1/6)*(1,3,2)+(-1/6)*(1,3), 
  (2/3)*()+(-1/3)*(1,2,3)+(-1/3)*(1,3,2) ]
gap> pci = List( pci, x -> x^(1,2,3) );                  
true
]]>
</Example>


<ManSection>
   <Oper Name="AverageSum" 
         Arg="RG X"  
         Comm="(x_1+...+x_n)/n" />
   <Returns>
         an element of a group ring
   </Returns>         
   <Description>
         Returns the element of the group ring <A>RG</A> that is equal to the
         sum of all elements of <A>X</A> divided by the order of <A>X</A>, where
         <A>X</A> is a finite subset of the underlying group <M>G</M> of 
         <A>RG</A>. The order of <A>X</A> must be invertible in the ring
         of coefficients <M>R</M>.
   </Description>
</ManSection>

<Example>
<![CDATA[
gap> G:=DihedralGroup(16);;               
gap> QG:=GroupRing( Rationals, G );;
gap> FG:=GroupRing( GF(5), G );;
gap> AverageSum( QG, DerivedSubgroup(G) );
(1/4)*<identity> of ...+(1/4)*f3+(1/4)*f4+(1/4)*f3*f4
gap> AverageSum( FG, DerivedSubgroup(G) ); 
(Z(5)^2)*<identity> of ...+(Z(5)^2)*f3+(Z(5)^2)*f4+(Z(5)^2)*f3*f4
]]>
</Example>

</Section>


<Section Label="CC">
<Heading>Cyclotomic classes</Heading>

<ManSection>
   <Oper Name="CyclotomicClasses" 
         Arg="q n"  
         Comm="Cyclotomic classes" />
   <Returns>
         a partition of [ 0 .. n ]
   </Returns>          
   <Description>
         Returns the <A>q</A>-cyclotomic classes modulo <A>n</A>, where <A>q</A>
         and <A>n</A> are relatively prime positive integers
         (see <Ref Sect="CyclotomicClass" />).
   </Description>
</ManSection>

<Example>
<![CDATA[
gap> CyclotomicClasses( 2, 21 );
[ [ 0 ], [ 1, 2, 4, 8, 16, 11 ], [ 3, 6, 12 ], [ 5, 10, 20, 19, 17, 13 ],
  [ 7, 14 ], [ 9, 18, 15 ] ]
gap> CyclotomicClasses( 10, 21 );
[ [ 0 ], [ 1, 10, 16, 13, 4, 19 ], [ 2, 20, 11, 5, 8, 17 ],
  [ 3, 9, 6, 18, 12, 15 ], [ 7 ], [ 14 ] ]
]]>
</Example>


<ManSection>
   <Oper Name="IsCyclotomicClass" 
         Arg="q n C"  
         Comm="Is Cyclotomic class" />
   <Description>
      Returns <K>true</K> if <A>C</A> is a <A>q</A>-cyclotomic class modulo
      <A>n</A> and <K>false</K> otherwise.
      <A>q</A> and <A>n</A> must be relatively prime integers and <A>C</A> 
      must be a subset of [0 .. n] (see <Ref Sect="CyclotomicClass" />).
   </Description>
</ManSection>

<Example>
<![CDATA[
gap> IsCyclotomicClass( 2, 7, [1,2,4] );
true
gap> IsCyclotomicClass( 2, 21, [1,2,4] );
false
gap> IsCyclotomicClass( 2, 21, [3,6,12] );
true
]]>
</Example>


</Section>

</Chapter>